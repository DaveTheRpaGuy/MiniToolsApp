@page "/calculator"
@page "/calc"
@rendermode InteractiveAuto
@using CalculatorLibrary

<h1>Calculator</h1>
<div class="calculator container remove-focus-border" @ref="calcRef" tabindex="0" @onkeypress="KeyboardEventHandler">
    <div class="row">
        <input class="fs-6 text-end" disabled type="text" @bind="secondaryInput" />
    </div>
    <div class="row">
        <input class="fs-1 fw-bold text-end" disabled type="text" @bind="primaryInput" />
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-primary btn-outer" @onclick="(() => SubmitFirstNumber(Operation.Modulus))" @onkeypress:preventDefault>%</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-outer" @onclick="(() => ClearAllInputs())" @onkeypress:preventDefault>CE</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-outer" @onclick="(() => ClearAllInputs())" @onkeypress:preventDefault>C</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-outer" @onclick="(() => Backspace())" @onkeypress:preventDefault>B</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-primary btn-outer" @onclick="(() => SubmitFirstNumber(Operation.Reciprocal))" @onkeypress:preventDefault>1/X</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-outer" @onclick="(() => SubmitFirstNumber(Operation.Square))" @onkeypress:preventDefault>Sq</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-outer" @onclick="(() => SubmitFirstNumber(Operation.SquareRoot))" @onkeypress:preventDefault>SqRt</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-outer" @onclick="(() => SubmitFirstNumber(Operation.Divide))" @onkeypress:preventDefault>/</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-primary btn-core" @onclick="(() => AppendNumberToPrimaryInput(7))" @onkeypress:preventDefault>7</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-core" @onclick="(() => AppendNumberToPrimaryInput(8))" @onkeypress:preventDefault>8</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-core" @onclick="(() => AppendNumberToPrimaryInput(9))" @onkeypress:preventDefault>9</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-outer" @onclick="(() => SubmitFirstNumber(Operation.Multiply))" @onkeypress:preventDefault>x</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-primary btn-core" @onclick="(() => AppendNumberToPrimaryInput(4))" @onkeypress:preventDefault>4</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-core" @onclick="(() => AppendNumberToPrimaryInput(5))" @onkeypress:preventDefault>5</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-core" @onclick="(() => AppendNumberToPrimaryInput(6))" @onkeypress:preventDefault>6</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-outer" @onclick="(() => SubmitFirstNumber(Operation.Subtract))">-</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-primary btn-core" @onclick="(() => AppendNumberToPrimaryInput(1))" @onkeypress:preventDefault>1</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-core" @onclick="(() => AppendNumberToPrimaryInput(2))" @onkeypress:preventDefault>2</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-core" @onclick="(() => AppendNumberToPrimaryInput(3))" @onkeypress:preventDefault>3</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-outer" @onclick="(() => SubmitFirstNumber(Operation.Add))" @onkeypress:preventDefault>+</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="btn btn-primary btn-core" @onclick="(() => SubmitFirstNumber(Operation.ReverseSign))" @onkeypress:preventDefault>+/-</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-core" @onclick="(() => AppendNumberToPrimaryInput(0))" @onkeypress:preventDefault>0</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-core" @onclick="(() => AppendToPrimaryInput('.'))" @onkeypress:preventDefault>.</button>
        </div>
        <div class="col">
            <button class="btn btn-primary btn-equals" @onclick="(() => RunEquals())" @onkeypress:preventDefault>=</button>
        </div>
    </div>
</div>

@code {
    private string _primaryInput = "0";
    public string primaryInput
    {
        get { return _primaryInput;}
        set
        {
            string val = value.Replace(",", "");
            int decimalIndex = val.IndexOf(".");
            _primaryInput = "";
            int count = 0;
            for (int i = val.Length - 1; i > -1; i--)
            {
                _primaryInput = val[i] + _primaryInput;
                if (decimalIndex >-1 && decimalIndex <= i) continue;
                count++;
                if (count % 3 == 0 && i > 0)
                {
                    _primaryInput = "," + _primaryInput;
                }
            }

        }
    }

    private string secondaryInput = "";
    private double? firstNumber = null;
    private double? secondNumber = null;
    private Operation operation = Operation.None;
    private bool clearPrimaryInput = false;
    private bool clearSecondaryInput = false;
    private string keyPressed = "";
    bool IsShiftKey;
    private ElementReference calcRef;
    string[] allowedKeys = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", ".", "+", "-", "*", "/", "%", "=", "Enter" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await calcRef.FocusAsync();
        }
    }

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        keyPressed = args.Key;
        if (allowedKeys.Contains(keyPressed) == false) return;
        if (double.TryParse(keyPressed, out _))
        {
            AppendNumberToPrimaryInput(int.Parse(keyPressed));
        }
        else if (keyPressed == ".")
        {
            AppendToPrimaryInput(Convert.ToChar(keyPressed));
        }
        else if (keyPressed == "+")
        {
            SubmitFirstNumber(Operation.Add);
        }
        else if (keyPressed == "-")
        {
            SubmitFirstNumber(Operation.Subtract);
        }
        else if (keyPressed == "*")
        {
            SubmitFirstNumber(Operation.Multiply);
        }
        else if (keyPressed == "/")
        {
            SubmitFirstNumber(Operation.Divide);
        }
        else if (keyPressed == "%")
        {
            SubmitFirstNumber(Operation.Modulus);
        }
        else if (keyPressed == "Enter")
        {
            RunEquals();
        }

    }

    private enum Operation
    {
        None,
        Add,
        Subtract,
        Multiply,
        Divide,
        Modulus,
        Reciprocal,
        Square,
        SquareRoot,
        ReverseSign
    }

    private void AppendNumberToPrimaryInput(int num)
    {
        ClearPrimaryInputIfApplicable();
        ClearSecondaryInputIfApplicable();
        primaryInput = double.Parse(primaryInput + num.ToString()).ToString();
    }

    private void AppendToPrimaryInput(char c)
    {
        ClearPrimaryInputIfApplicable();
        ClearSecondaryInputIfApplicable();
        primaryInput = primaryInput + c;
    }

    private void ClearPrimaryInputIfApplicable()
    {
        if (clearPrimaryInput)
        {
            primaryInput = "0";
            clearPrimaryInput = false;
        }
    }

    private void ClearSecondaryInputIfApplicable()
    {
        if (clearSecondaryInput)
        {
            secondaryInput = "";
            clearSecondaryInput = false;
        }
    }

    private void ClearAllInputs()
    {
        clearPrimaryInput = true;
        clearSecondaryInput = true;
        ClearPrimaryInputIfApplicable();
        ClearSecondaryInputIfApplicable();
    }

    private void Backspace()
    {
        if (primaryInput.Length > 0)
        {
            primaryInput = primaryInput.Substring(0, primaryInput.Length - 1);
        }
    }

    private void SubmitFirstNumber(Operation op)
    {
        firstNumber = double.Parse(primaryInput);
        operation = op;
        secondaryInput = firstNumber.ToString() + " " + GetOperationChar(op);
        if(op == Operation.Reciprocal || op == Operation.Square || op == Operation.SquareRoot || op == Operation.ReverseSign)
        {
            RunEquals();
        }
        else
        {
            clearPrimaryInput = true;
        }

    }

    private void RunEquals()
    {
        secondNumber = double.Parse(primaryInput);
        double a = firstNumber ?? 0;
        double b = secondNumber ?? 0;
        double? result = null;
        if (operation == Operation.Reciprocal || operation == Operation.Square || operation == Operation.SquareRoot || operation == Operation.ReverseSign)
        {
            result = RunMathOperation(a, operation);
        }
        else
        {
            result = RunMathOperation(a, b, operation);
        }

        if (result is null)
        {
            primaryInput = "eh?";
        }
        else
        {
            primaryInput = (string)(result.ToString());
        }
        secondaryInput = firstNumber.ToString() + " " + GetOperationChar(operation) + " " + secondNumber.ToString() + " =";
        operation = Operation.None;
        clearSecondaryInput = true;
        clearPrimaryInput = true;
    }

    private string GetOperationChar(Operation op)
    {
        string output = "";
        switch (op)
        {
            case Operation.Add:
                output = "+";
                break;
            case Operation.Subtract:
                output = "-";
                break;
            case Operation.Multiply:
                output = "*";
                break;
            case Operation.Divide:
                output = "/";
                break;
            case Operation.Modulus:
                output = "%";
                break;
            case Operation.Reciprocal:
                output = "1/x";
                break;
            case Operation.Square:
                output = "Sq";
                break;
            case Operation.SquareRoot:
                output = "SqRt";
                break;
            case Operation.ReverseSign:
                output = "+/-";
                break;
            default:
                output = "";
                break;
        }
        return output;
    }

    private double? RunMathOperation(double a, double b, Operation op)
    {
        MathOperations math = new MathOperations();
        double? output = null;
        switch (op)
        {
            case Operation.Add:
                output = math.Add(a, b);
                break;
            case Operation.Subtract:
                output = math.Subtract(a, b);
                break;
            case Operation.Multiply:
                output = math.Multiply(a, b);
                break;
            case Operation.Divide:
                output = math.Divide(a, b);
                break;
            case Operation.Modulus:
                output = math.Modulus(a, b);
                break;
            default:
                output = null;
                break;
        }
        return output;
    }

    private double? RunMathOperation(double a, Operation op)
    {
        MathOperations math = new MathOperations();
        double? output = null;
        switch (op)
        {
            case Operation.Reciprocal:
                output = math.Reciprocal(a);
                break;
            case Operation.Square:
                output = math.Square(a);
                break;
            case Operation.SquareRoot:
                output = math.SquareRoot(a);
                break;
            case Operation.ReverseSign:
                output = math.ReverseSign(a);
                break;
            default:
                output = null;
                break;
        }
        return output;
    }
}
